import winston from "winston";
import morgan from "morgan";
import { Request, Response, NextFunction } from "express";

// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Logger Instance ‡∏î‡πâ‡∏ß‡∏¢ Winston ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏µ‡∏™‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
const logger = winston.createLogger({
  level: "info",
  format: winston.format.combine(
    winston.format.timestamp({ format: "YYYY-MM-DD HH:mm:ss" }), // ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö timestamp ‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏á‡πà‡∏≤‡∏¢‡∏Ç‡∏∂‡πâ‡∏ô
    winston.format.colorize(), // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏µ‡πÉ‡∏´‡πâ log
    winston.format.printf(({ timestamp, level, message, ...meta }) => {
      let metaString = Object.keys(meta).length
        ? `\nüìå Meta: ${JSON.stringify(meta, null, 2)}`
        : "";
      return `[${timestamp}] ${level}: ${message}${metaString}`;
    }),
  ),
  transports: [
    new winston.transports.Console(), // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á Log ‡∏ö‡∏ô Console
    new winston.transports.File({
      filename: "logs/app.log",
      format: winston.format.json(),
    }), // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö Log ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
  ],
});

export default logger;

// ‚úÖ Middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Log HTTP Requests ‡∏î‡πâ‡∏ß‡∏¢ Morgan ‡πÅ‡∏ö‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
export const httpLogger = morgan("tiny", {
  stream: {
    write: (message) => logger.info(message.trim()),
  },
});

// ‚úÖ Middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Log Requests (Params, Query, Body) ‡πÉ‡∏´‡πâ‡∏î‡∏π‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
export const requestLogger = (
  req: Request,
  res: Response,
  next: NextFunction,
) => {
  logger.info(`üì© Incoming Request: ${req.method} ${req.url}`, {
    Params: req.params,
    Query: req.query,
    Body: req.body,
  });
  next();
};

// ‚úÖ Middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏ö Error ‡πÅ‡∏•‡∏∞ Log ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÑ‡∏Æ‡πÑ‡∏•‡∏ó‡πå‡∏à‡∏∏‡∏î‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
export const errorLogger = (
  error: any,
  req: Request,
  res: Response,
  next: NextFunction,
) => {
  logger.error("‚ùå Error Occurred", {
    Message: error.message,
    Stack: error.stack,
    URL: req.url,
    Method: req.method,
  });
  res.status(500).json({ error: "Internal Server Error" });
};
