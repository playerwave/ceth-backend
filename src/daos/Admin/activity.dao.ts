import { Repository, getRepository } from "typeorm";
import { connectDatabase } from "../../db/database";
import { Activity } from "../../entity/Activity";
import logger from "../../middleware/logger";
import { UserActivity } from "../../entity/UserActivity";

export class ActivityDao {
  private activityRepository: Repository<Activity> | null = null;

  constructor() {
    this.initializeRepository();
  }

  // ‚úÖ ‡πÉ‡∏ä‡πâ async function ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  private async initializeRepository(): Promise<void> {
    try {
      const connection = await connectDatabase();
      this.activityRepository = connection.getRepository(Activity);
      console.log("‚úÖ Activity Repository initialized");
    } catch (error) {
      console.error("‚ùå Error initializing ActivityDao(Admin):", error);
    }
  }

  private checkRepository(): void {
    if (!this.activityRepository) {
      throw new Error("Database connection is not established");
    }
  }

  async createActivityDao(activityData: Partial<Activity>): Promise<Activity> {
    this.checkRepository();
    try {
      const activity = this.activityRepository!.create(activityData);
      logger.info("üìå Creating activity:", activityData);

      return await this.activityRepository!.save(activity);
    } catch (error) {
      logger.error("‚ùå Error in createActivityDao(Admin):", error);
      throw new Error("Failed to create activity");
    }
  }

  // async updateActivityDao(
  //   activityId: number,
  //   activityData: Partial<Activity>
  // ): Promise<Activity> {
  //   this.checkRepository();

  //   try {
  //     logger.info("üîÑ Updating activity with ID:", activityId);
  //     const existingActivity = await this.activityRepository!.findOne({
  //       where: { ac_id: activityId },
  //     });

  //     if (!existingActivity) {
  //       throw new Error(`Activity with ID ${activityId} not found`);
  //     }

  //     Object.assign(existingActivity, activityData);
  //     return await this.activityRepository!.save(existingActivity);
  //   } catch (error) {
  //     logger.error("‚ùå Error in updateActivityDao(Admin):", error);
  //     throw new Error("Failed to update activity");
  //   }
  // }

  async updateActivityDao(
    activityId: number,
    activityData: Partial<Activity>,
  ): Promise<Activity> {
    this.checkRepository();

    try {
      logger.info("üîÑ Updating activity with ID:", activityId);
      console.log("üõ†Ô∏è Received activityId in DAO:", activityId);

      const existingActivity = await this.activityRepository!.findOne({
        where: { ac_id: activityId },
        relations: ["assessment"], // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î relation ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
      });

      if (!existingActivity) {
        console.error(`‚ùå Activity with ID ${activityId} not found in DB`);
        throw new Error(`Activity with ID ${activityId} not found`);
      }

      console.log("‚úÖ Found existing activity:", existingActivity);

      // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î `ac_id` ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏° ‡πÑ‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
      activityData.ac_id = activityId;

      Object.assign(existingActivity, activityData);

      console.log("üîÑ Final Data before Saving:", existingActivity);

      // ‚úÖ ‡πÉ‡∏ä‡πâ `save()` ‡πÇ‡∏î‡∏¢‡∏Å‡∏≥‡∏´‡∏ô‡∏î explicit `ac_id`
      const updatedActivity =
        await this.activityRepository!.save(existingActivity);

      console.log("‚úÖ Successfully updated activity:", updatedActivity);
      return updatedActivity;
    } catch (error) {
      logger.error("‚ùå Error in updateActivityDao(Admin):", error);
      throw new Error("Failed to update activity");
    }
  }

  async getActivityByIdDao(activityId: number): Promise<Activity | null> {
    this.checkRepository();

    try {
      const activity = await this.activityRepository!.createQueryBuilder(
        "activity",
      )
        .leftJoinAndSelect("activity.assessment", "assessment") // ‚úÖ ‡∏î‡∏∂‡∏á assessment ‡∏î‡πâ‡∏ß‡∏¢
        .where("activity.ac_id = :id", { id: activityId })
        .getOne();

      console.log("üü¢ DAO Response:", JSON.stringify(activity, null, 2)); // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏î‡∏∂‡∏á‡∏°‡∏≤

      return activity;
    } catch (error) {
      logger.error(
        `‚ùå Error in getActivityByIdDao(Admin) ${activityId}:`,
        error,
      );
      throw new Error("Failed to get activity by id");
    }
  }

  // async deleteActivityDao(activityId: number): Promise<boolean> {
  //   this.checkRepository();

  //   try {
  //     logger.info("üîÑ Attempting to delete activity with ID:", activityId);
  //     const deleteResult = await this.activityRepository!.delete(activityId);

  //     const userActivityRepository = getRepository(UserActivity);

  //     if (deleteResult.affected === 0) {
  //       console.warn(`‚ö†Ô∏è Activity with ID ${activityId} not found.`);
  //       return false;
  //     }

  //     logger.info(`‚úÖ Activity with ID ${activityId} deleted successfully.`);
  //     return true;
  //   } catch (error) {
  //     logger.error("‚ùå Error in updateActivityDao(Admin):", error);
  //     throw new Error("Failed to update activity");
  //   }
  // }

  async deleteActivityDao(activityId: number): Promise<boolean> {
    this.checkRepository();

    try {
      logger.info("üîÑ Attempting to delete activity with ID:", activityId);

      const userActivityRepository = getRepository(UserActivity);

      // ‚úÖ ‡∏•‡∏ö UserActivity ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô
      await userActivityRepository.delete({ activity: { ac_id: activityId } });
      logger.info(
        `üßπ Deleted all UserActivity rows with activityId ${activityId}`,
      );

      // ‚úÖ ‡∏•‡∏ö Activity ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
      const deleteResult = await this.activityRepository!.delete(activityId);

      if (deleteResult.affected === 0) {
        console.warn(`‚ö†Ô∏è Activity with ID ${activityId} not found.`);
        return false;
      }

      logger.info(`‚úÖ Activity with ID ${activityId} deleted successfully.`);
      return true;
    } catch (error) {
      logger.error("‚ùå Error in deleteActivityDao(Admin):", error);
      throw new Error("Failed to delete activity and related data");
    }
  }

  async getAllActivitiesDao(): Promise<Activity[]> {
    this.checkRepository();

    try {
      logger.info("üìå Fetching all activities");
      return await this.activityRepository!.find(); // ‚ùå ‡πÄ‡∏≠‡∏≤ pagination ‡∏≠‡∏≠‡∏Å
    } catch (error) {
      logger.error("‚ùå Error in getAllActivities(Admin):", error);
      throw new Error("Failed to get all activity");
    }
  }

  async searchActivityDao(ac_name: string): Promise<Activity[]> {
    this.checkRepository();

    try {
      const query =
        "SELECT * FROM activity WHERE ac_name ILIKE '%' || $1 || '%' ORDER BY ac_id ASC";
      return await this.activityRepository!.query(query, [ac_name]);
    } catch (error) {
      logger.error(`‚ùå Error in searchActivity:`, error);
      throw new Error(`Error fetching activities: ${error}`);
    }
  }

  async adjustStatusActivityDao(
    ac_id: number,
    ac_status: string,
  ): Promise<Activity | null> {
    this.checkRepository();

    const status = ac_status.trim().toLowerCase();
    if (status !== "public" && status !== "private") {
      throw new Error(
        "‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏ó‡∏µ‡πà ac_status ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 'Public' ‡∏´‡∏£‡∏∑‡∏≠ 'Private'",
      );
    }

    try {
      const query = `UPDATE activity SET ac_status = $1, ac_last_update = NOW() WHERE ac_id = $2 RETURNING *`;
      const result = await this.activityRepository!.query(query, [
        ac_status,
        ac_id,
      ]);

      return result.length ? result[0] : null;
    } catch (error) {
      console.error(`‚ùå Error in adjustStatusActivity:`, error);
      throw new Error(`Error updating activity status: ${error}`);
    }
  }
}
