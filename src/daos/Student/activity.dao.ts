import { Repository } from "typeorm";
import { connectDatabase } from "../../db/database";
import { Activity } from "../../entity/Activity";
import logger from "../../middleware/logger";

export class ActivityDao {
  private activityRepository: Repository<Activity> | null = null;

  constructor() {
    this.initializeRepository();
  }

  // ‚úÖ ‡πÉ‡∏ä‡πâ async function ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  private async initializeRepository(): Promise<void> {
    try {
      const connection = await connectDatabase();
      this.activityRepository = connection.getRepository(Activity);
      console.log("‚úÖ Activity Repository initialized");
    } catch (error) {
      console.error("‚ùå Error initializing ActivityDao(Admin):", error);
    }
  }

  private checkRepository(): void {
    if (!this.activityRepository) {
      throw new Error("Database connection is not established");
    }
  }

  async getAllActivitiesDao(userId: number): Promise<Activity[]> {
    this.checkRepository();

    try {
      logger.info(
        "üìå Fetching all public activities that user has not registered for"
      );

      // ‡πÉ‡∏ä‡πâ `new Date()` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
      const currentDate = new Date();

      return await this.activityRepository!.createQueryBuilder("activity")
        .leftJoin("activity.userActivities", "useractivity")
        .where("activity.ac_status = 'Public'") // ‡∏Å‡∏£‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô Public
        .andWhere(
          "(useractivity.u_id IS NULL OR useractivity.u_id != :userId)",
          { userId }
        ) // ‡∏Å‡∏£‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà userId ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
        .andWhere(
          "(activity.ac_registered_count < activity.ac_seat OR activity.ac_seat IS NULL OR activity.ac_seat = 0)"
        ) // ‡∏Å‡∏£‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ ac_seat ‡∏´‡∏£‡∏∑‡∏≠ ac_seat ‡πÄ‡∏õ‡πá‡∏ô NULL ‡∏´‡∏£‡∏∑‡∏≠ 0
        .andWhere("activity.ac_end_register > :currentDate", { currentDate }) // ‡∏Å‡∏£‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà ac_end_register ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        .andWhere(
          "(activity.ac_registered_count IS NULL OR activity.ac_registered_count < activity.ac_seat)"
        ) // ‡∏Å‡∏£‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà ac_registered_count ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ ac_seat ‡∏´‡∏£‡∏∑‡∏≠ ac_seat ‡πÄ‡∏õ‡πá‡∏ô NULL
        .getMany();
    } catch (error) {
      logger.error("‚ùå Error in getAllActivities(Admin):", error);
      throw new Error("Failed to get all activities");
    }
  }

  async fetchEnrolledActivities(u_id: number): Promise<any[]> {  // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô any[] ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö soft_hours, hard_hours
    if (!this.activityRepository) {
      throw new Error("Repository is not initialized");
    }
    try {
      const query = `
      SELECT 
        a.ac_id, a.ac_name, a.ac_type, a.ac_description, 
        a.ac_start_time, a.ac_end_time, a.ac_seat, 
        u.u_soft_hours, u.u_hard_hours
      FROM users u
      JOIN useractivity ua ON u.u_id = ua.u_id
      JOIN activity a ON ua.ac_id = a.ac_id
      WHERE u.u_id = $1
      ORDER BY a.ac_start_time ASC;
    `;


      const result = await this.activityRepository.query(query, [u_id]);


      return result;
    } catch (error) {
      console.error(`‚ùå Error in fetchEnrolledActivities Dao: ${error}`);
      throw new Error("Failed to fetch enrolled activities");
    }




  }

  async getUserSkills(userId: number): Promise<{ u_soft_hours: number; u_hard_hours: number } | null> {
    if (!this.activityRepository) {
      throw new Error("Repository is not initialized");
    }
    try {
      console.log(`üì° Querying database for user ID: ${userId}`); // ‚úÖ Debug

      const query = `
          SELECT u.u_soft_hours, u.u_hard_hours 
          FROM users u
          WHERE u.u_id = $1;
      `;

      const result = await this.activityRepository.query(query, [userId]);

      if (result.length > 0) {
        console.log("‚úÖ Query Result:", result[0]); // ‚úÖ Debug
        return result[0];
      } else {
        console.log("‚ö†Ô∏è No data found for user");
        return null;
      }
    } catch (error) {
      console.error(`‚ùå Error in getUserSkills DAO: ${error}`);
      throw new Error("Failed to get user skills");
    }
  }






}
