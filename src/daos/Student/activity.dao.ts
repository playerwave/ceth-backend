import { Repository, getRepository, Equal } from "typeorm";
import { connectDatabase } from "../../db/database";
import { UserActivity } from "../../entity/UserActivity";
import { Activity } from "../../entity/Activity";
import { User } from "../../entity/User";
import logger from "../../middleware/logger";

export class ActivityDao {
  private activityRepository: Repository<Activity> | null = null;

  constructor() {
    this.initializeRepository();
  }

  // ‚úÖ ‡πÉ‡∏ä‡πâ async function ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  private async initializeRepository(): Promise<void> {
    try {
      const connection = await connectDatabase();
      this.activityRepository = connection.getRepository(Activity);
      console.log("‚úÖ Activity Repository initialized");
    } catch (error) {
      console.error("‚ùå Error initializing ActivityDao(Admin):", error);
    }
  }

  private checkRepository(): void {
    if (!this.activityRepository) {
      throw new Error("Database connection is not established");
    }
  }

  async getStudentActivitiesDao(userId: number): Promise<Activity[]> {
    this.checkRepository();

    try {
      logger.info(
        "üìå Fetching all public activities that user has not registered for"
      );

      // ‡πÉ‡∏ä‡πâ `new Date()` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
      const currentDate = new Date();

      return await this.activityRepository!.createQueryBuilder("activity")
        .leftJoin("activity.userActivities", "useractivity")
        .where("activity.ac_status = 'Public'") // ‡∏Å‡∏£‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô Public
        .andWhere(
          "(useractivity.u_id IS NULL OR useractivity.u_id != :userId)",
          { userId }
        ) // ‡∏Å‡∏£‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà userId ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
        .andWhere(
          "(activity.ac_registered_count < activity.ac_seat OR activity.ac_seat IS NULL OR activity.ac_seat = 0)"
        ) // ‡∏Å‡∏£‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ ac_seat ‡∏´‡∏£‡∏∑‡∏≠ ac_seat ‡πÄ‡∏õ‡πá‡∏ô NULL ‡∏´‡∏£‡∏∑‡∏≠ 0
        .andWhere("activity.ac_end_register > :currentDate", { currentDate }) // ‡∏Å‡∏£‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà ac_end_register ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        .andWhere(
          "(activity.ac_registered_count IS NULL OR activity.ac_registered_count < activity.ac_seat)"
        ) // ‡∏Å‡∏£‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà ac_registered_count ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ ac_seat ‡∏´‡∏£‡∏∑‡∏≠ ac_seat ‡πÄ‡∏õ‡πá‡∏ô NULL
        .getMany();
    } catch (error) {
      logger.error("‚ùå Error in getAllActivities(Admin):", error);
      throw new Error("Failed to get all activities");
    }
  }

  async getActivityByIdDao(activityId: number): Promise<Activity | null> {
    this.checkRepository();

    try {
      const activity = await this.activityRepository!.createQueryBuilder(
        "activity"
      )
        .leftJoinAndSelect("activity.assessment", "assessment") // ‚úÖ ‡∏î‡∏∂‡∏á assessment ‡∏î‡πâ‡∏ß‡∏¢
        .where("activity.ac_id = :id", { id: activityId })
        .getOne();

      console.log("üü¢ DAO Response:", JSON.stringify(activity, null, 2)); // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏î‡∏∂‡∏á‡∏°‡∏≤

      return activity;
    } catch (error) {
      logger.error(
        `‚ùå Error in getActivityByIdDao(Admin) ${activityId}:`,
        error
      );
      throw new Error("Failed to get activity by id");
    }
  }

  async studentEnrollActivityDao(
    userId: number,
    activityId: number
  ): Promise<void> {
    const userActivityRepository = getRepository(UserActivity);
    const userRepository = getRepository(User);
    const activityRepository = getRepository(Activity);

    const user = await userRepository.findOneBy({ u_id: userId });
    const activity = await activityRepository.findOneBy({ ac_id: activityId });

    if (!user || !activity) {
      throw new Error("User or activity not found.");
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ ac_registered_count >= ac_seat ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (
      activity.ac_seat !== null &&
      activity.ac_seat !== undefined &&
      activity.ac_registered_count !== undefined &&
      activity.ac_seat !== 0 &&
      activity.ac_registered_count >= activity.ac_seat
    ) {
      throw new Error("Activity is full. Cannot register.");
    }

    const existingRegistration = await userActivityRepository.findOne({
      where: { user: user, activity: activity },
    });

    if (existingRegistration) {
      throw new Error("User has already registered for this activity.");
    }

    // ‚úÖ ‡πÉ‡∏ä‡πâ instance ‡πÅ‡∏ó‡∏ô `create()`
    const userActivity = new UserActivity();
    userActivity.user = user;
    userActivity.activity = activity;
    userActivity.uac_checkin = undefined;
    userActivity.uac_checkout = undefined;
    userActivity.uac_take_assessment = false;

    await userActivityRepository.save(userActivity);

    await activityRepository.update(activity.ac_id, {
      ac_registered_count: () => "ac_registered_count + 1",
    });
  }

  // async getEnrolledActivitiesDao(u_id: number): Promise<any[]> {
  //   // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô any[] ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö soft_hours, hard_hours
  //   if (!this.activityRepository) {
  //     throw new Error("Repository is not initialized");
  //   }
  //   try {
  //     const query = `
  //     SELECT
  //       a.ac_id, a.ac_name, a.ac_company_lecturer ,a.ac_description, a.ac_type,
  //       a.ac_start_time, a.ac_end_time, a.ac_seat, a.ac_status, a.ac_registered_count
  //     FROM users u
  //     JOIN user_activity ua ON u.u_id = ua.u_id
  //     JOIN activity a ON ua.ac_id = a.ac_id
  //     WHERE u.u_id = $1
  //     ORDER BY a.ac_start_time ASC;
  //   `;

  //     const result = await this.activityRepository.query(query, [u_id]);

  //     return result;
  //   } catch (error) {
  //     console.error(`‚ùå Error in fetchEnrolledActivities Dao: ${error}`);
  //     throw new Error("Failed to fetch enrolled activities");
  //   }
  // }

  async getEnrolledActivitiesDao(userId: number): Promise<Activity[]> {
    this.checkRepository();

    try {
      logger.info(`üìå Fetching enrolled activities for student ID: ${userId}`);

      return await this.activityRepository!.createQueryBuilder("activity")
        .innerJoin("activity.userActivities", "useractivity")
        .where("useractivity.u_id = :userId", { userId }) // ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏ô‡∏¥‡∏™‡∏¥‡∏ï‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
        .orderBy("activity.ac_start_time", "ASC") // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        .getMany();
    } catch (error) {
      logger.error("‚ùå Error in getEnrolledActivitiesDao:", error);
      throw new Error("Failed to fetch enrolled activities");
    }
  }

  // async unEnrollActivityDao(
  //   userId: number,
  //   activityId: number
  // ): Promise<boolean> {
  //   try {
  //     const userActivityRepository = getRepository(UserActivity);

  //     // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡πà‡∏≠‡∏ô

  //     console.log(userId);
  //     console.log(activityId);

  //     const userActivity = await userActivityRepository.findOne({
  //       where: {
  //         user: Equal(userId),
  //         activity: Equal(activityId),
  //       },
  //       relations: ["user", "activity"],
  //     });

  //     if (!userActivity) {
  //       console.warn("‚ö†Ô∏è User is not enrolled in this activity.");
  //       return false;
  //     }

  //     // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
  //     await userActivityRepository.remove(userActivity);

  //     return true;
  //   } catch (error) {
  //     console.error("‚ùå Error in unEnrollActivity DAO:", error);
  //     throw new Error("Failed to unenroll from activity");
  //   }
  // }

  async searchActivityDao(ac_name: string): Promise<Activity[]> {
    this.checkRepository();

    try {
      const query =
        "SELECT * FROM activity WHERE ac_name ILIKE '%' || $1 || '%' ORDER BY ac_id ASC";
      return await this.activityRepository!.query(query, [ac_name]);
    } catch (error) {
      logger.error(`‚ùå Error in searchActivity:`, error);
      throw new Error(`Error fetching activities: ${error}`);
    }
  }

  async unEnrollActivityDao(
    userId: number,
    activityId: number
  ): Promise<boolean> {
    try {
      const userActivityRepository = getRepository(UserActivity);
      const activityRepository = getRepository(Activity);

      console.log(userId);
      console.log(activityId);

      // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏Å‡πà‡∏≠‡∏ô
      const userActivity = await userActivityRepository.findOne({
        where: {
          user: Equal(userId),
          activity: Equal(activityId),
        },
        relations: ["user", "activity"],
      });

      if (!userActivity) {
        console.warn("‚ö†Ô∏è User is not enrolled in this activity.");
        return false;
      }

      // ‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
      await userActivityRepository.remove(userActivity);
      console.log("‚úÖ Unenrolled successfully.");

      // ‚úÖ ‡∏•‡∏î `ac_registered_count` ‡∏Ç‡∏≠‡∏á activity ‡∏ô‡∏±‡πâ‡∏ô‡∏•‡∏á 1
      await activityRepository
        .createQueryBuilder()
        .update(Activity)
        .set({
          ac_registered_count: () => "GREATEST(ac_registered_count - 1, 0)",
        }) // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡πà‡∏≤‡∏ï‡∏¥‡∏î‡∏•‡∏ö
        .where("ac_id = :activityId", { activityId })
        .execute();

      console.log("‚úÖ Updated ac_registered_count for activity:", activityId);

      return true;
    } catch (error) {
      console.error("‚ùå Error in unEnrollActivity DAO:", error);
      throw new Error("Failed to unenroll from activity");
    }
  }
}
